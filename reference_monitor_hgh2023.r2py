"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py reference_monitor_hgh2023.r2py [attack].r2py 
""" 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False   
        self._lock = createlock()
        # local (per object) reference to the underlying file
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'

        # make the files
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        # add 'SE' to the readat file if create==True and Afile is blank
        if create:
            a_file_contents = self.Afile.readat(None, 0)
            if not a_file_contents:
                self.Afile.writeat('SE',0)

    def writeat(self,data,offset):
        # Write the requested data to the B file using the sandbox's writeat call
        self._lock.acquire(True)
        try:
            self.Bfile.writeat(data,offset)
        except:
            return
        finally:
            self._lock.release()
  
    def readat(self,bytes,offset):
        # Read from the A file using the sandbox's readat...
        self._lock.acquire(True)
        try:
            return self.Afile.readat(bytes,offset)
        except:
            return ''
        finally:
            self._lock.release()

    def close(self):
        # if Bfile is valid, write contents to Afile
        self._lock.acquire(True)
        try:
            b_file_contents = self.Bfile.readat(None, 0)
            a_file_contents = self.Afile.readat(None, 0)
            if b_file_contents and (b_file_contents != a_file_contents):
                start_char = b_file_contents[0]
                end_char = b_file_contents[-1]
                if start_char == 'S' and end_char == 'E':
                    self.Afile.writeat(b_file_contents, 0)
            # Code to make attackcase1 pass
            if not b_file_contents:
                self.Bfile.writeat(a_file_contents, 0)
        except:
            pass
        finally:
            # close both files 
            self.Afile.close()
            self.Bfile.close()
            self._lock.release()


def ABopenfile(filename, create):
    return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
